1. VueJS là 1 framework của Javascript. Mã nguồn 100% là javacript
2. React -> Facebook
	JSX -> Thay thế HTML
   Angular -> Google
	Typescript
	Angular1
	Angular2 > -> AngularJS (Khác hẳn Angular1)
   VueJS -> Một nhân viên của Google. Laravel
	Ra sau react và angular kế thừa được một số đặc điểm nổi bật

   Vue like View in MVC -> một framework linh động, 
   hỗ trợ single-page-application (ứng dụng đơn trang - không phải tải lại trang nhiều )

3. Cài đặt môi trường
   - VScode
   - NodeJS
   - Git

4. 
   Cài đặt VueJS
   Thêm đoạn script <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script> 

   Vue instance là gì ? Dễ hiểu là một đối tượng Vue để quản lý đối tượng trong DOM
   đối tượng vue đƯợc khởi tạo sẽ gán những method và property đố để sử dụng

5. Data binding
   v-bind:(attribute) => v-bind:href="url"
6. Javascript expression
   {{ expression return a value}}
7. events
   v-on:(event) => v-on:click="method(event)"
   or v-on:click="method($event, number)"
8. Event modifier 
   thay vì v-onsubmit và e.preventDefault() thì dùng v-on:submit.prevent.

9. Computed & methods
   - Computed thì không truyền vào tham số, computed chỉ load lại phần đã bị thay đổi chứ không load lại hết (hiệu suất tăng tốt hơn)
   - Methods thì có thể truyền vào tham số để tính toán, method sẽ được chạy một cách không mong muốn vì vue sẽ reload lại đối tưỢng vue
10. v-model
   Ràng buộc dữ liệu 2 chiều
11. Ràng buộc class 
   v-bind:class

12. Vue CLI - command line interface
   Mỗi thành phần là một đối tượng vue và cần đƯợc chia ra và xử lý 
   vuejs template webpack

13. development
   - Babel: is a Javascript compiler - giúp cho mã nguồn mới, cú pháp mới chạy được trên các trình duyệt cũ
      -> ES6 phiên bản mới
   - webpack là một công cụ giúp đóng gói code, đóng gói mã nguồn
      -> Đóng gói vào trong một file js duy nhất ở file dist (dùng lệnh npm run build để hiểu rõ hơn)

14. Cấu trúc file của vue js
   - toàn bộ mã nguồn sẽ trong thư mục src
   - import vue trong dependencies
   - app.vue sẽ chứa toàn bộ mã nguồn - một thành phần trong trang web sẽ được quản lý bởi một file .vue
   - file app.vue gồm 3 thành phần (template, script, style) - script export ra và file main.js sẽ import
   - nếu muốn cấu hình lại file webpack thì vào webpack.config.js
   webpack: entry : file js đầu tiên chạy
            output: nơi xuất file, cấu hình tên file cấu hình
            file-loader: chỉnh sửa lưu file (lưu các tệp tài liệu)
            vue-loader: để webpack hiểu là một file hợp lệ và đóng gói vào file js cuối cùng
   - cài vetur để format file .vue nhìn cho đẹp và có thể dùng từ khoá scaffold để tạo mới một cấu trúc
   - nếu không có thể dùng vue vscode snippet và dùng vbase để tạo mới
   - data phải là một function và return về 1 object

15. Khai báo component khi sử dụng A

16. Props
   - Những data truyền từ Component cha và Component con
   - Cú pháp giống thuộc tính

17. Props Down -> Truyền dữ liệU xuống con và không được thay đổi trực tiếp
18. Event Up -> Truyền một sự kiện cho component cha biết làm muốn thay đổi 
-> Nhiệm vụ của component cha là tiếp nhận và tiến hành thay đổi
-> Custom event 
-> Khi dùng sự kiện mới thì biến event sẽ không có mà truyền vào tham số thứ 2 trong hàm $emit bằng cách tự khai báo

18. Ref (reference)
   - ví dụ một input muốn custom cho dễ và có thể tạo một component mớI hướng đến sự kiện input đó
   - cài đặt component gốc ref="input"
   - từ compnent mới this.$refs.input.click()
   - ngoài ra có thể dùng label như javascript thông thưỜng

19. Slot
   - slot sẽ tạo ra thêm html cho thẻ con bằng cách kẹp giữa thẻ con <subcomponent> // addition html</subcomponent>
   - sau đó thì thêm vào component con một thẻ slot để nhận html đó

20. Lifecycle
   1. Before create: 
   2. Created: Toàn bộ dữ liệu được load, gọi API, call AJAX 
   3. Before mount: compile dom
   4. Mounted: All dom display, jquery
   5. Before destroy: Chạy khi bị huỷ bỏ (khi dùng biểu thức điều kiện) destroy thư viện của component
   6. Destroyed:
   7. Before update: 
   8. Updated: